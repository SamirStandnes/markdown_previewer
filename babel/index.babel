class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      text: PLACEHOLDER,
      expandedE: true,
      expandedP: true
    };
    this.handleChange = this.handleChange.bind(this);
    this.expandMinPreview = this.expandMinPreview.bind(this);
    this.expandMinEditor = this.expandMinEditor.bind(this);
  }

  handleChange(event) {
    this.setState({
      text: event.target.value
    });
  }

  expandMinPreview() {
    this.setState({
      expandedP: !this.state.expandedP
    });
  }

  expandMinEditor() {
    this.setState({
      expandedE: !this.state.expandedE
    });
  }

  rawMarkup(content) {
    let markedUp = marked(content, { sanitize: true });
    console.log(markedUp);
    return { __html: markedUp };
  }

  render() {
    return (
      <div id="app">
       {this.state.expandedE && <div id="info"> <i class="far fa-hand-point-left"></i> when the editor is expanded, try increasing the heigth of it!</div> }
        <Editor
          value={this.state.text}
          handleChange={this.handleChange}
          size={this.state.expandedE}
          expand={this.expandMinEditor}
        />
        <Preview
          text={this.state.text}
          rawMarkup={this.rawMarkup}
          size={this.state.expandedP}
          expand={this.expandMinPreview}
        />
      </div>
    );
  }
}

const Editor = props => {
  return (
    <div id="editor-parent">
      <div id={props.size ? "editor-child" : "big"}>
        <Navbar componentName={"EDITOR"} expand={props.expand} />
        <textarea
          id="editor"
          style={
            props.size
              ? { height: 145 }
              : { height: 200, width: "99.5%", resize: "vertical" }
          }
          value={props.value}
          onChange={props.handleChange}
        />
      </div>
    </div>
  );
};

const Preview = props => {
  return (
    <div id="preview-parent">
      <div
        id={props.size ? "preview-child" : "big"}
        style={{ backgroundColor: "#efbbff" }}
      >
        <Navbar componentName={"PREVIEW"} expand={props.expand} />
        <div
          id="preview"
          dangerouslySetInnerHTML={props.rawMarkup(props.text)}
        />
      </div>
    </div>
  );
};

const Navbar = props => {
  return (
    <nav>
      <ul id="navbar">
        <li style={{ paddingRight: 15 }}>
          <i className="fab fa-free-code-camp" />
        </li>
        <li>{props.componentName}</li>
        <li style={{ marginLeft: "auto", paddingRight: 5 }}>
          <i
            id="expandButton"
            onClick={props.expand}
            className="fas fa-expand-arrows-alt"
          />
        </li>
      </ul>
    </nav>
  );
};

const ExpandLogo = props => {
  return (
    <li style={{ marginLeft: "auto", paddingRight: 5 }}>
      {" "}
      <img id="logo" src={EXPAND_LOGO} />{" "}
    </li>
  );
};

// placeholder text is copied from the Project Example
const PLACEHOLDER = `# Welcome to my React Markdown Previewer!

## This is a sub-heading...
### And here's some other cool stuff:
  
Heres some code, \`<div></div>\`, between 2 backticks.
\`\`\`
// this is multi-line code:

function anotherExample(firstLine, lastLine) {
  if (firstLine == '\`\`\`' && lastLine == '\`\`\`') {
    return multiLineCode;
  }
}
 \`\`\`
You can also make text **bold**... whoa!
Or _italic_.
Or... wait for it... **_both!_**
And feel free to go crazy ~~crossing stuff out~~.

There's also [links](https://www.freecodecamp.com), and
> Block Quotes!

And if you want to get really crazy, even tables:

Wild Header | Crazy Header | Another Header?
------------ | ------------- | ------------- 
Your content can | be here, and it | can be here....
And here. | Okay. | I think we get it.

- And of course there are lists.
  - Some are bulleted.
     - With different indentation levels.
        - That look like this.


1. And there are numbererd lists too.
1. Use just 1s if you want! 
1. But the list goes on...
- Even if you use dashes or asterisks.
* And last but not least, let's not forget embedded images:

![React Logo w/ Text](https://goo.gl/Umyytc)`;

const FREECODECAMP_LOGO =
  "https://cdn.rawgit.com/Deftwun/e3756a8b518cbb354425/raw/6584db8babd6cbc4ecb35ed36f0d184a506b979e/free-code-camp-logo.svg";

const EXPAND_LOGO = ReactDOM.render(<App />, document.getElementById("root"));
